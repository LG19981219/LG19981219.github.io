<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初识Vue.js(四)]]></title>
    <url>%2F2019%2F07%2F31%2F%E5%88%9D%E8%AF%86Vue-js-%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[vue的动画的基本用法vue为我们提供了一些过渡类的动画，通过对给定的类进行操作，可以给使用者带来更加良好的体验，让过渡显得不那么突兀。 上图就是vue所规定的几个过渡时间。其中v-enter与v-leave-to表示进场和离场的时刻，他们的样式是相同的，v-enter-active与v-leave-active表示进场时间段和出场时间段,v-enter-to与v-leave过渡的最终效果，但一般不使用。了解了vue动画的几个时刻就可以来写一些简单的动画。首先我们将要添加动画的元素放入transition标签内，表示这是动画的控制区域，然后通过对其添加v-enter,v-leave-to控制进场之前的样式，v-enter-active与v-leave-active控制过渡的时间和样式，就可以完成基本的动画过渡.有时候我们不想使用v-前缀，就可以在transition标签的name属性上写上我们自己想要的名字,就可以将v-前缀替换成我们想要的名字。 使用第三方类库及钩子函数vue动画也可以使用第三方的动画类库，例如animate。首先将animate导入，然后在transition标签的enter-active-class添加入场动画类，leave-active-class添加出场动画类就可以实现第三方类库的使用。同时还可以通过duration为其指定过渡时长，如果想分别指定离开和进入的过渡时长，那么传入一个对象分别指定即可。vue动画也有自己的钩子函数，可以将其看作是vue动画的生命周期函数，它可以帮我们实现半场动画主要有before-enter,enter,after-enter,enter-cancelled(不常用),before-leave,leave,after-leave,leave-cancelled(不常用),通过对其绑定事件即可实现半场动画。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Vue.js(三)]]></title>
    <url>%2F2019%2F07%2F28%2F%E5%88%9D%E8%AF%86Vue-js-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[Vue的生命周期Vue的生命周期就如同自然界各种生物的生命周期一样，从生到死所经历的一系列事情。分为创建，挂载，运行，销毁四个阶段，每个阶段又有前后之分。所以一共有8个生命周期函数，也叫生命周期钩子。创建阶段包含beforeCreate和created两个事件。当我们用var vm = Vue({})去声明一个Vue实例时，就要开始创建Vue实例，首先是初始化一个空的Vue的实例对象，然后就到了beforeCreated函数，此时不管是data中的数据，还是methods中的数据都没有被初始化，所以这时只是一个空的Vue实例。执行完beforeCreated后就开始初始化data和methods中的数据和方法,然后到created钩子,创建阶段结束。通过创建阶段的执行过程，我们可以看出，要想使用data中的数据或者methods中的方法，最早只能在created中使用。挂载阶段包含beforeMount和mounted两个事件。当创建阶段完成后，就需要根据创建阶段初始化好的数据，在内存中渲染好DOM，执行beforeMount钩子，也就是说在beforeMount函数执行时，模板还在内存中，并没有挂载到页面中去。当beforeMount执行完毕后，会将内存中的DOM挂载到页面上去，执行mounted钩子。也就是说如果在操作DOM，最早得在mounted中使用。 运行阶段包括beforeUpdate,updated两个事件。运行阶段主要就是数据的更新，以及从新渲染到页面中去。当数据发生改变时，会执行beforeUpdate,但是此时被没有将最新的数据渲染到页面中去，也就是说此时data中的数据是新的，但是页面还是之前的样子。当执行完beforeUpdate时，才会将数据渲染为新的DOM并将其挂载到页面中去。然后执行update，此时页面和data都是最新的。销毁阶段包括beforeDestroy和destroyed两个事件。当实例需要被销毁时，就会触发这两个钩子，执行beforeDestroy时，vue实例就从运行阶段进入了销毁阶段，此时vue实例的过滤器，指令等等还没有被销毁，还处于可以状态。当执行到destroyed时，实例就已经被完全销毁了。以上就是我对vue生命周期的理解，下面附上官方的解释流程图]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Vue.js(二)]]></title>
    <url>%2F2019%2F07%2F26%2F%E5%88%9D%E8%AF%86Vue-js-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[过滤器vue.js允许我们自己自定义过滤器，用于格式化一些文本，它只能用在插值和v-bind表达式上。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；vue中的过滤器主要包括全局过滤器和私有过滤器。全局过滤器的定义主要是通过Vue.filter(‘过滤器名称’,处理函数)进行定义，他接受两个参数，第一个参数为过滤器的名称，第二个为处理函数。处理函数可以有n个参数，其中第一个为变量自身，后面的参数为传递过来的参数。过滤器也支持同时使用多个过滤器，根据调用的先后顺序，将前一个过滤器的处理结果，当作下一个过滤器的初始值。私有过滤器是在当前vm实例上通过filters属性进行定义，它只能在当前vm实例控制的区域才能发挥作用，其他与全局过滤器一致。当有私有过滤器与全局过滤器重名时，采用就近原则，优先调用私有过滤器。 自定义指令vue.js允许我们自定义指令，可以将一些常用的操作定义为指令。通过Vue.directive(‘指令名称’,对象)方法可以定义指令，这里指令名称在定义时不用加v-前缀，但是在调用时，需加v-前缀。第二个参数为一个对象，它具有一些指令相关的函数我这只列举常用的三个bind,inserted,updated。其中bind表示指令刚绑定到元素时，inserted表示将元素插入DOM时，updated表示当数据更新时。这些函数有多个参数，第一个参数为el，表示该元素自身，为一个DOM对象，第二个参数为binding，时一个对象，它包含了一些指令的信息。下面为一个自定义一个自动获取焦点的指令v-focus。 自定义全局和局部的 自定义指令： 123456789101112131415161718192021222324252627282930313233343536// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：Vue.directive(&apos;focus&apos;, &#123; inserted: function (el) &#123; // inserted 表示被绑定元素插入父节点时调用 el.focus(); &#125;&#125;);// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细： directives: &#123; color: &#123; // 为元素设置指定的字体颜色 bind(el, binding) &#123; el.style.color = binding.value; &#125; &#125;, &apos;font-weight&apos;: function (el, binding2) &#123; // 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数 el.style.fontWeight = binding2.value; &#125; &#125; 自定义指令的使用方式： 12&lt;input type=&quot;text&quot; v-model=&quot;searchName&quot; v-focus v-color=&quot;&apos;red&apos;&quot; v-font-weight=&quot;900&quot;&gt;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识vue.js(一)]]></title>
    <url>%2F2019%2F07%2F24%2F%E5%88%9D%E8%AF%86vue-js-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[前言花了一周左右的时间学习了一下vue.js前端框架，作为目前的前端三大主流框架，vue感觉还是挺好用的，让自己对前端有了一个更深的认识，所以就打算写几篇博客介绍一下vue，一方面是为了记录，另一方面也是对之前的学习的一个回顾和总结。 MVC与MVVM简单介绍一下MVC与MVVM,至于为什么介绍他们，是因为他可以让你在大局上理解vue是在什么地方干什么事情。MVVM是Model-View-ViewModel的简写。即模型-视图-视图模型。模型指的是后端传递的数据。视图指的是所看到的页面。视图模型mvvm模式的核心，它是连接view和model的桥梁。它有两个方向：一是将模型转化成视图，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将视图转化成模型，即将所看到的页面转化成后端的数据。MVC是Model-View- Controller的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离,MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现. Vue与MVVM简单了解了MVVM,然后就可以理解Vue，因为Vue就是一个基于MVVM提出的前端框架。初始化一个Vue实例，它的data就相当于M,整个实例就是MV,所控制的区域就是V.实际代码如下: 123456789&lt;div id=&quot;div&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt; &lt;script&gt; var vm = new Vue(&#123; el: &apos;#div&apos;, data: &#123; msg: &apos;Hello World&apos;, &#125; &#125;) &lt;/script&gt; 这里id为div的容器,就是Vue所控制的区域,对应于你创建出来的Vue实例的el,data也就是你需要展示的数据，然后通过插值表达式就可以将数据渲染到页面上了。 几种常见的Vue指令v-on:是事件绑定的指令，他可以在元素身上绑定methods中定义的方法，可以简写为@符号。v-bind:是用来绑定属性的指令，他是用来将data中的变量属性，绑定在该元素上，可以简写为:。v-model是用来实现双向数据绑定的指令，它可以实现元素与data的双向绑定，就是说v-bind是从data中取出数据，就不放回了，但是v-model取出数据后还可以放回。v-for是用来循环data中的数组，并将其渲染到页面上，:key是为v-for循环指定一个唯一的标识符.v-show和v-if都是用来渲染数据的指令，一般来说，v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好。]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript之原型链]]></title>
    <url>%2F2019%2F07%2F10%2Fjavascript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%2F</url>
    <content type="text"><![CDATA[原型规则 所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性 12var arr = [];arr.a = 1; 所有的引用类型（数组、对象、函数），都有一个_proto_属性（隐式原型），属性值是一个普通的对象; 所有的函数，都具有一个prototype（显式原型），属性值也是一个普通对象; 所有的引用类型（数组、对象、函数），其隐式原型指向其构造函数的显式原型；（obj.proto === Object.prototype）; 当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的_proto_（即它的构造函数的prototype）中去寻找; 原型链当试图得到一个对象f的某个属性时，如果这个对象本身没有这个属性，那么会去它的_proto_（即它的构造函数的prototype）obj._proto_中去寻找；当obj._proto也没有时，便会在obj._proto._proto_（即obj的构造函数的prototype的构造函数的prototype）中寻找;]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript原型链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript的垃圾回收机制]]></title>
    <url>%2F2019%2F07%2F08%2Fjavascript%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[js的垃圾回收机制所谓垃圾回收机制，就是制定一套规则去回收掉那些不再使用的数据，释放掉他们所占用的内存,js中垃圾收集器会周期性的执行这套规则去实现垃圾的回收。目前在浏览器中使用的两个规则，分别为标记清除和引用计数。 标记清除js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境，或者使用一个“进入环境”变量列表及一个“离开环境”变量列表来跟踪哪个变量发生了变化。说到底，如何标记变量其实并不重要，关键在于采取什么策略。垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。 引用计数引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存.Netscape Navigator3是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：循环引用。循环引用指的是对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用。 1234567function problem()&#123; var objA=new Object(); var objB=new Object(); objA.b=objB; objB.a=objA;&#125; 在这个例子中，objA和objB通过各自的属性相互引用；也就是说，这两个对象的引用次数都是2。在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是问题。但采用引用计数策略的实现中，当函数执行完毕后，objA和objB还将继续存在，因为它们的引用次数永远不会是0。假如这个函数被重复多次调用，将导致大量内存得不到回收。为此Netscape在Navigator4中放弃了引用计数的方式，转而采用标记清除来实现其垃圾回收机制。可是，引用计数导致的麻烦并未终结。 我们知道，IE中有一部分对象并不是原生js对象。例如，其DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。因此，即使IE的js引擎采用标记清除策略来实现，但js访问的COM对象依然是基于引用计数策略的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。 1234var element=document.getElementById(&quot;some_element&quot;);var myObject=new Object();myObject.e=element;element.o=myObject; 这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。其中，变量myObject有一个名为element的属性指向element对象；而变量element也有一个属性名为o回指myObject。由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。 为了避免类似这样的循环引用问题，最好是在不使用它们的时候手工断开原生js对象与DOM元素之间的连接。例如，可以使用下面的代码消除前面例子创建的循环引用： 12myObject.element=null;element.o=null; 将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾回收器下次运行时，就会删除这些值并回收它们占用的内存。转载自https://blog.csdn.net/pvfhv/article/details/8589614]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript垃圾回收</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript的作用域及解析机制]]></title>
    <url>%2F2019%2F07%2F07%2Fjavascript%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%8F%8A%E8%A7%A3%E6%9E%90%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[全局作用域与局部作用域javascript分为全局作用域和局部作用域,首先解释一下什么是作用域，作用域就是变量可以起作用的区域,包括两层含义1.生命周期，即变量什么时候生什么时候死。2.访问变量，即在哪些区域可以访问变量全局作用域就是在整个区域内都可以就行访问，局部作用域就只能在自己内部进行访问。例如: 12345678var a = 10;console.log(a); //10function f()&#123; var b = 20; console.log(a); //10 console.log(b) //20&#125;console.log(b) //报错 变量对象与作用域链前面已经知道了全局变量可以在任何区域被访问，局部作用域只能在自身内部被访问。那么是什么原因或是机制造成的呢，这就要引入js的作用域链.其是我们可以将声明的变量看作其在自身作用域下的属性，那么就可以将这个作用域看作一个对象，这就是变量对象，js中最大的对象为window。但是除了window对象我们可以使用，其他的变量对象我们不能直接调用，这是js引擎解析会用到的. 1234567var a = 10;console.log(window.a ==== a) //truefunction f()&#123; var b = 20;&#125;console.log(f.b) //报错 了解了变量对象，我们来理解一下什么是作用域链,下面我们以一个示例代码说明 12345678910111213var name = &quot;小明&quot;;var age = &quot;18&quot;;console.log(name); //&quot;小明&quot;function fn()&#123; var name = &quot;小花&quot;; var age = 20; console.log(name); //&quot;小花&quot; function fn2()&#123; var name = &quot;小黑&quot;; var age = 18; console.log(name); //&quot;小黑&quot; &#125;&#125; 上述代码中有三个作用域,将其分类列出:1.全局作用域：name,age,fn2.fn局部作用域:name,age,fn23.fn2局部作用域:name,age当查找变量时首先，会在当前作用域下进行查找，如果没有找到，就会向上层作用域继续查找，知道进入全局作用域，将这些作用域链接起来就形成了作用域链。这也就解释了为什么我们可以在局部作用域内访问全局变量，但当局部作用域和全局变量重名时，访问到的为局部变量。 js解析机制(预解析)12console.log(a) //undefinedvar a = 10 上面这段代码之所以会打印出undefinde,就是因为js的预解析机制。js解析代码有两步，第一步，预解析。第二步，逐行读取代码。所以预解析是十分重要的一个步骤。js的预解析就是首先将所有var 声明的变量赋值为undefined,然后将所有的函数提升到最开头。这就是为什么我们没有先声明变量，但打印出了undefined。但是这又带来了一个新的问题。如果变量与变量或者函数重名怎么办。总结以下三条规则:1.变量与变量重名无所谓，因为它首先会将变量赋值为undefined，后面读到哪一行代码，就给它赋值就行。2.变量与函数重名，变量声明无效，也就是保留函数声明，去除变量声明。3.函数与函数重名，谁在后声明谁有效，也就是保留最后声明的函数，去除之前所有的重名函数。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript的作用域及解析机制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[支付宝小程序之数据绑定和渲染]]></title>
    <url>%2F2019%2F07%2F05%2F%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%92%8C%E6%B8%B2%E6%9F%93%2F</url>
    <content type="text"><![CDATA[数据绑定支付宝小程序的数据绑定主要是通过获取每一个page的data对象，然后通过该表达式来动态的渲染页面的内容，下面做一个简单的示例。首先新建一个小程序的页面，在该页面的.axml写入&lt;view&gt;&lt;/view&gt;,这里的myName就是你所需要展示的数据。这时，再去该页面的js文件中新建data对象，data{myName : &quot;LG&quot;},保存，就可以在模拟器中看到我们自己定义的数据被渲染。 数据渲染数据渲染有条件渲染和for循环列表渲染两种 条件渲染条件渲染即满足条件才进行渲染，否则不进行渲染。基本格式为&lt;view a:if=&quot;&quot;&gt;内容&lt;/view&gt;,当flag为真时，内容才会被渲染，这里的flag可以写在data对象中，即通过数据绑定的方式传入true或false.条件渲染也可以通过运算结果进行判断，基本格式为&lt;view a:if=&quot;&quot;&gt;内容1&lt;/view&gt;&lt;view a:elif=&quot;&quot;&gt;内容二&lt;/view&gt;&lt;view a:elif=&quot;&quot;&gt;内容3&lt;/view&gt;条件1满足，显示内容1，条件2满足，显示内容2，否则显示内容3. for循环列表渲染for循环渲染主要是通过绑定data中的数组,在页面循环显示基本格式为&lt;view a:for=&quot;&quot; a:for-item=&quot;item&quot; a:for-index=&quot;index&quot;&gt;&lt;/view&gt;其中for-item为渲染的每一项，for-index为数组下标，这两项默认为item和index，当然你也可以自行更改。 view和block的区别在进行循环时，常用的外部容器为view和block，它两的在用法上没有区别，但是view相当于复制，而block则相当于直接在页面写内容。]]></content>
      <categories>
        <category>支付宝小程序</category>
      </categories>
      <tags>
        <tag>数据渲染和绑定</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript基本类型及操作符]]></title>
    <url>%2F2019%2F07%2F03%2Fjavascript%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[前言最近在回顾之前学习的知识，打算把自己复习的这些知识的记录下来，也是一个加强记忆的过程 javascript基本数据类型javascript中有基本数据类型和复杂（引用）数据类型,基本数据类型包括Undefined,Number,String,Number,Boolean,Null,Symbol(ES6新增,表示独一无二的值)，引用类型统称Object对象,主要包括对象，函数和数组。这里只回顾基本数据类型。 NumberNumber表示数值类型，包括整数和浮点数。 NaNNaN是一个特殊的数值，表示非数值。其主要有两个规则1.任何涉及NaN的操作，都会返回NaN。2.NaN与任何值都不相等，包括它自身。isNaN是用来检测参数是否为非数值,返回值为Boolean,在检测时，会先尝试将参数转换为数值，在进行判断。 数值转换数制转换主要有三个函数Number(),ParseInt(),ParseFloat()。其中Number为强制转换。ParseInt()则是将参数转换为整数，第一个参数为需要转换的值，必须以数字开头才能转换，第二个参数为进制。转换为空字符串时为NaN。parserFloat()转换为浮点数。 StringString表示字符串类型,用双引号或者单引号都可以表示字符串。 String转换toSting()和String()都可以进行转换，其中String()的语法与Number()类似，都是强制转换。toString的语法为str.toString(),str为要转换的值。 BooleanBoolean只有两个值，true和false，表示真和假。 Boolean转换规则1.除0以外的所有数字，转换后都为true。2.除””字符串以外，转换后都为true。3.null和undefined转换后都为false。 javascript操作符基本操作符加减乘除就不用在赘述了，在使用时注意，其会将字符串隐式转换为数值 a++和++a的区别a++和++a都是递增的意思，不同之处在于a++会先返回原值，在返回递增之后的值。++a直接返回递增后的值 比较操作符== 操作符是比较值，但不比较类型。===则不但比较值，还会比较类型 三元操作符条件? 执行代码1 : 执行代码2 当条件为真时执行代码1,为假时执行代码2 逻辑操作符&amp;&amp;&amp;&amp;表示’与’,只有当条件都为真时，才为真，有一个为假，都为假。但其不一定返回值都为Boolean，以下为不是Boolean的规则1.当第一个条件转换为真时,返回第二个值。2.有一个条件为NaN时，返回NaN。3.有一个条件为null时，返回null。4.有一个条件为undefined时，返回undefined。5.当同时具有NaN,null,undefined，谁在前返回谁。 ||||表示或操作，只要有一个为真就为真。其不是Boolean的规则与&amp;&amp;相反 ！表示非，即取反的意思。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript基本类型和操作符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决hexo部分图片加载]]></title>
    <url>%2F2019%2F06%2F29%2F%E8%A7%A3%E5%86%B3hexo%E9%83%A8%E5%88%86%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[前言昨天在上传博客图片时遇到了一个很神奇的问题，部分图片加载，部分不加载。上网搜索发现好像大家都是全部加载不出来，下个插件解决。这与我遇到的问题不太一样，于是开始了自己推测解决问题的历程。 猜测一(自己本地缓存没有清理干净)因为我一般上传博客不习惯用hexo clean清理一下(懒),猜测可能由于自己没有清理干净，导致上传的时候冲突，才无法显示。清理掉本地缓存后，接着上传，还是无法显示。—–失败 猜测二(上传路径不对)觉得是自己的路径不会，导致浏览器无法找到图片，按F12后发现果然浏览器报404错误—开心，找到问题所在了，于是去自己的github仓库查看，发现编译过后的html文件路径没有错误，并且图片也都在所属的文件内。—–失败 猜测三(图片自身格式问题)因为自己的问题是部分图片未加载,而唯一加载的那一张是我自己画的png格式的图,未加载的图片是我电脑截屏的png格式的图,于是自己从网上下了一张png格式的图,自己在本地又截了一张，上传，刷新，果然下载的图片可以显示,而截图无法显示。找到问题十分开心，可是该怎么解决，仔细看自己的代码发现所有jpg格式的图片都可以显示,于是自己将所有的电脑截屏的图片改为了jpg格式的，上传，刷新，成功显示—-完结撒花 小结解决完问题后，百度了一下两种图片有什么区别,简言之就是png格式的图片占据空间大，是无损压缩，而jpg格式的图片是有损压缩，是最适合在万维网上传输和存储的图片格式。]]></content>
      <categories>
        <category>日常问题</category>
      </categories>
      <tags>
        <tag>hexo图片加载问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex弹性布局 三]]></title>
    <url>%2F2019%2F06%2F28%2Fflex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[justify (设置每个元素在主轴上的对齐方式)它有五个值分别为flex-start(默认,左对齐),flex-end(右对齐),center(居中)space-between和space-around。一定注意该属性是设置主轴的对齐方式,因为默认的主轴为水平,所以下列代码测试图都为水平主轴，当其主轴为其他方向时，对齐方式类似，当设置纵轴为主轴时，一定要设置一个给定高度，否则无法看出效果。以下为测试代码截图:justify-content : flex-end justify-content : centerjustify-content : space-betweenjustify-content : space-around]]></content>
      <categories>
        <category>flex</category>
      </categories>
      <tags>
        <tag>flex布局之justify-content</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex弹性布局 二]]></title>
    <url>%2F2019%2F06%2F28%2Fflex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[flex-wrap (控制元素换行)它有三个值分别为nowrap(默认,不换行),wrap(换行),wrap-reverse(逆向换行)在测试换行时注意将外层的container的width设置的小于内部元素的总宽度，这样才会换行。以下为测试代码截图:flex-wrap : nowrap flex-wrap : wrapflex-wrap : wrap-reverse]]></content>
      <categories>
        <category>flex</category>
      </categories>
      <tags>
        <tag>flex布局之flex-wrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex弹性布局 一]]></title>
    <url>%2F2019%2F06%2F28%2Fflex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[flex弹性盒模型flex弹性盒模型图如下 其分为容器container,内部项目(元素)flex item,主轴(默认为水平方向),交叉轴(纵轴)设置盒子为弹性盒子，只需要设置display:flex即可,接下来看一下如何控制弹性盒子， flex direction (控制元素的排列方向)它有四个值分别为row(默认,水平),row-reverse(逆水平),column(纵轴),column-reverse(逆纵轴)以下为测试代码截图:flex-direction : row flex-direction : row-reverse flex-direction : columnflex-direction : column-reverse]]></content>
      <categories>
        <category>flex</category>
      </categories>
      <tags>
        <tag>flex布局之flex-direction</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6之Promise]]></title>
    <url>%2F2019%2F06%2F02%2FES6%E4%B9%8BPromise%2F</url>
    <content type="text"><![CDATA[Promise简介首先引用MDN上的关于Promise的定义:Promise对象用于表示一个异步操作的最终状态（完成或失败）以及其返回值。单看这段定义可能会不太懂它在说什么，我的理解是Promise对象就相当于一个容器，里面存放着未来才会结束的事。举个例子，你约了你的朋友去看电影，他答应明天下午6点到,这就是承诺。他可以遵守承诺，也可以不遵守，这就是未来的事情。Promise有三种状态，进行中，已成功，已失败，对应这个例子，就是他承诺会6点到（进行中），他6点确实到了（已成功），他6点没到(已失败)。通过这个例子我们也看看出Promise的特点，一旦发生改变，就不会在变了，对于这个例子就是，他来了还是没来，都是既定事实了，不可能在改变了。 基础用法123456789101112131415161718const p = new Promise((resolve,reject) =&gt;&#123; if(success)&#123; resolve(&apos;成功的结果&apos;) &#125;else&#123; reject(&apos;失败的结果&apos;) &#125; &#125;) p.then(function (res) &#123; // 接收resolve传来的数据，做些什么 &#125;,function (err) &#123; // 接收reject传来的数据，做些什么 &#125;) p.catch(function (err) &#123; // 接收reject传来的数据或者捕捉到then()中的运行报错时，做些什么 &#125;) p.finally(function()&#123; // 不管什么状态都执行 &#125;) then的用法由上面的基础用法代码可以看出.then()接收两个参数，第一个是resolved状态的回调函数，第二个是rejected状态的回调函数 catch的用法.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。 finally的用法.finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。 all的用法Promise的all方法提供了并行执行异步操作的能力，并且在所有异步操作执行完后才执行回调，all接收一个数组参数，里面的值最终都算返回Promise对象。这样，三个异步操作的并行执行的，等到它们都执行完后才会进到then里面。那么，三个异步操作返回的数据哪里去了呢？都在then里面呢，all会把所有异步操作的结果放进一个数组中传给then。（1）只有getNumber1、getNumber2、getNumber3的状态都变成fulfilled，Promise的状态才会变成fulfilled，此时getNumber1、getNumber2、getNumber3的返回值组成一个数组，传递给Promise的回调函数。 （2）只要getNumber1、getNumber2、getNumber3之中有一个被rejected，Promise的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给Promise的回调函数。 1234567891011121314151617181920212223242526272829303132333435363738function getNumber1()&#123; var p = new Promise(function(resolve, reject)&#123; setTimeout(function()&#123; console.log(&apos;1&apos;) resolve(&apos;随便什么数据1&apos;); &#125;, 1000); &#125;); return p; &#125; function getNumber2()&#123; var p = new Promise(function(resolve, reject)&#123; setTimeout(function()&#123; console.log(&apos;2&apos;) reject(&apos;随便什么数据2&apos;); &#125;, 2000); &#125;); return p; &#125; function getNumber3()&#123; var p = new Promise(function(resolve, reject)&#123; setTimeout(function()&#123; console.log(&apos;3&apos;) reject(&apos;随便什么数据3&apos;); &#125;, 3000); &#125;); return p; &#125; Promise.all([getNumber1(),getNumber2(),getNumber3()]) .then(function(res)&#123; console.log(&apos;res&apos;,res) console.log(&apos;res&apos;,res[2].data) &#125;,function (err)&#123; console.log(&apos;err&apos;,err) &#125;) .catch(function(err2)&#123; console.log(&apos;err2&apos;,err2) &#125;) race的用法Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。不过只要getNumber1、getNumber2、getNumber3之中有一个实例率先改变状态，Promise的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给Promise的回调函数。 注意1、Promise定义后就执行，所以通常用函数进行分装2、Promise.all()中的参数是以一个数组传入的]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6之变量的解构赋值]]></title>
    <url>%2F2019%2F05%2F30%2FES6%E4%B9%8B%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[解构赋值的定义与分类解构赋值语法是一个JavaScript表达式，这使得可以将值从数组或对象提取到不同的变量。这是MDN上给出的解释，有点难以理解。我对解构赋值的理解为，将其拆分为赋值和解构，赋值就是给变量赋值，解构就是可以看成等号两边结构相同他们就可以进行一一对应，注意一定要结构相同。结构赋值分为数组的解构赋值，对象的解构赋值，字符串的解构赋值，数值和布尔值的解构赋值，函数参数的解构赋值，其中数组和对象的结构赋值是最最重要也最常用的，后面几个可以看成是这两个的应用。 数组的解构赋值在之前为变量赋值我们必须直接给定值例如 123let a = 0;let b = 1;let c = 2; 但解构赋值可以简化 1let [a, b, c] = [0, 1, 2]; 上面两部分代码都完成了对a,b,c的赋值，但是明显解构赋值要简洁的多。同时解构赋值还支持嵌套例如： 1let [a, b, [c, d, [e]]] = [1, 2, [3, 4, [5]]]; 只要结构相同,就可以对嵌套的数组进行解构赋值，所以在进行解构赋值时，一定要保证结构相同。如果只给数组中的某些值进行解构赋值，那么就可以将其他省略，但结构还是要一致，例如： 1let [, , [c, , [e]]] = [1, 2, [3, 4, [5]]]; 这样就可以只对c,e进行赋值。解构赋值还有默认值 123let [a, b = 1] = [0]; // a = 0,b = 1let [a, b = 1] = [0, undefined] //a = 0,b = 1let [a, b = 1] = [0, null] //a =0, b = null 通过上面的例子我们可以看出只有当赋值数组的值为undefined时，默认值才有效，其他情况都无效。 对象的解构赋值对象的解构赋值跟数组的解构赋值相似,但数组的元素是按次序排列的，变量的取值是由他的位置决定的，但对象的属性没有次序，变量必须与属性同名才可以取到正确的值。下面用一个游戏人物作为例子加以说明: 123456789101112131415161718192021222324252627282930const LiBai = &#123; name: LiBai, age: 56, skill:[ &#123; skillName:&quot;将进酒&quot;, cd: 12, 蓝耗: 80 &#125;, &#123; skillName:&quot;神来之笔&quot;, cd: 12, 蓝耗: 60 &#125;, &#123; skillName:&quot;青莲剑歌&quot;, cd: 12, 蓝耗: 120 &#125; ]&#125;//取出他的基本信息名字，年龄，技能const &#123;name,skill,age&#125; = LiBai;//取出他的第一个技能const &#123;skill:[skill1]&#125; = LiBai;//取出他的第二和第三个技能名称const &#123;skill:[, &#123;skillName: skillName1&#125;, &#123;skillName: skillName2&#125;]&#125; 通过上面的例子我们就可以基本理解对象的解构赋值,只需要保证结构相同，同时如果具有相同的属性名,可以对其进行重命名，防止冲突。当然对象的解构赋值也有默认值，用法和数组的解构赋值相同。对象的解构赋值还有一个小知识点，就是对已有的变量进行赋值时，要特别注意，例如: 123456let x;&#123;x&#125; = &#123;x: 1&#125;; //报错//正确写法let x;(&#123;x&#125; = &#123;x: 1&#125;); 代码之所以会报错只因为js会将{x}理解为一个代码块,从而发生错误,只要将大括号不写在首行就可以。 字符串的解构赋值字符串可以进行解构赋值，是因为字符串被转化为了一个类数组对象 12const [a, b, c, d, e] = &apos;hello&apos;// a = &apos;h&apos;, b = &apos;e&apos;,c = &apos;l&apos;,d = &apos;l&apos;, e = &apos;o&apos; 字符串的解构赋值还可以提取属性 12let &#123;length: len&#125; = &apos;hello&apos;//len = 5 数值和布尔值的解构赋值结构赋值时，如果等号右边不是对象或数组，则会将其先转为对象，称为包装对象，字符串的解构赋值能取到属性也是因为先被转化为了对象。 1let &#123;toString: s&#125; = 123; 函数参数的结构赋值函数参数的结构赋值就是数组和对象的解构赋值的应用，将其作为函数参数进行传递 1234function add([x, y])&#123; return x + y;&#125;add([1, 2]) //3 解构赋值的作用交换变量的值在之前我们要想交换变量的值，必须在声明一个中间变量，作为桥梁，但解构赋值就不需要,可以直接交换 123let x = 1;let y = 2;[x, y] = [y, x]; 接受多个 函数的返回值函数可能会返回多个返回值，这时我们只能将其包装为数组，或者对象，通过解构赋值取出这些值就十分方便。 函数参数的定义解构赋值可以方便的将一组参数与变量名对应起来。]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>解构赋值</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6的let和const命令]]></title>
    <url>%2F2019%2F05%2F29%2FES6%E7%9A%84let%E5%92%8Cconst%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[let命令ES6新增了let命令,其作用类似于var，都是用来声明变量的,但既然有了var,为什么还要有let呢,以下为let的详解。 不允许重复声明在ES5中，你可以这样写,并不会报错,最终打印20. 123var i = 10;var i = 20;console.log(i); // 20 但用let声明时就不允许这样，这是因为let不允许在相同作用域重复声明一个变量。 12345 //报错function() &#123; let i = 10; var i = 20;&#125; 基于这个特性,其不允许在函数内部重新声明参数 1234//报错function test(a) &#123; let a = 10;&#125; 块级作用域let声明的变量在块级作用域内有效,所谓块级作用域，通俗来说就是{}包括的区域。但是var并没有块级作用域的概念 12345678&#123; let i = 10;&#125;console.log(i); //报错&#123; var i = 10;&#125;console.log(i) // 10 针对这个特性它可以很好的解决for循环变量的问题 1234567var a = [];for(var i = 0; i &lt; 10 ; i++)&#123; a[i] = function() &#123; console.log(i); &#125;&#125;a[5](); //10 打印出的结果并不是我们想要的5，这是因为i是var声明的，在全局范围内有效，每一次循环i都会发生变化,导致最终输出为10;但是使用let声明，变量只在块级作用域内有效 1234567var a = [];for(let i = 0; i &lt; 10 ; i++)&#123; a[i] = function() &#123; console.log(i); &#125;&#125;a[5](); //5 不存在变量提升变量提升即变量可以在声明之前使用，使用var声明的变量存在变量提升. 12console.log(i); //undefinedvar i = 10; 以上代码相当于 123var i; //undefinedconsole.log(i); //undefinedi = 10; 但let则不存在变量提升 12console.log(i); //报错let i = 10; 暂存性死区在作用域内，使用let声明变量之前，变量都是不可用的，这种语法称为暂存性死区。它跟不允许变量提升类似，就是为了防止在变量声明前，使用变量。 const命令const命令是用来声明一个不可变的常量，声明的常量只可读，不可以改变，所以使用const声明时，必须进行初始化，否则其会报错 1const i; //报错 const命令的其他用法与let相同。块级作用域,暂存性死区,不允许变量提升。但是否const命令声明的值就一定不可变呢，这里就要理解一下const命令的本质，const命令的本质是指向的那个内存地址不变，对于简单变量来说，值就保存在变量指向的内存地址中，所以不可变。但对于复杂数据类型(数组，对象),变量指向的内存是一个指针，他只能保证指向的地址不变，但不能保证里面的内容不变。可以这么理解，就是家庭住址是固定不变的，但家里的人和别的事物都是可以改变的。 平常用法选择声明变量时时let,常量时用const，尽量不使用var，防止污染作用域.]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>let和const命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[建站那些事]]></title>
    <url>%2F2019%2F05%2F28%2F%E5%BB%BA%E7%AB%99%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[关于本站为什么建站这个寒假就有建立一个自己博客的想法，觉得可以在自己的博客上写一些东西，是一件很cool的事情。但为了恶补前端的知识，就暂时搁置了这个想法，一门心思的专心于前端三剑客(HTML,CSS,JavaScript)的学习，现在也算把基础知识都过了一遍，就决定来建立自己的个人博客，记录一下自己的日常感想(性格使然，遇见事情，总忍不住联想感叹)和学习前端时所碰到的有趣的知识(写文章时也是对知识的一个回顾)。 怎么建站有了想法就得开始行动(百度)起来了，看了各种组合搭配，最终还是选择了Hexo和github的方式，至于为什么选择这种方式，一个字”穷”,毕竟这种方式免费，还能顺带学习一下git命令,一举两得。选定了方式，就要开始选择自己博客的主题了，于是就去Hexo的主题商店里挑选自己喜欢的主题，看来看去都觉得不符合自己的心意，恰巧在浏览别人博客时发现了一个十分简洁的主题next(就是你了)。然后就按网上的流程开始了自己的建站之旅，细节这里我就不过多赘述了，毕竟网上大佬总结的很详细，按着一步一步来，一般不会出啥大问题，但小问题肯定是会有的，毕竟每个人的配置和环境都有所不同，这时候就要发挥百度的神奇力量了，打开百度，输入你的问题，你就能收获各种各样的解答。解决掉几个小的问题后，总算是把自己的博客搭起来了，在输入域名弹出来自己博客的那一刻，觉得自己的努力没有白费，小有收获。 关于本人自我介绍长安大学的一名计算机大三学生，自我感觉良好，其实是个菜鸡。大学前两年混着混着，就到了该找工作步入社会的阶段了。回想起前两年的大学经历，甚是遗憾——没有仔细钻研编程，现在才幡然醒悟，开始恶补。所幸有着点基础，现在学起来，才没有那么吃力，也慢慢通过前端找到了写代码的乐趣，毕竟以前就是单纯的逻辑，对着黑乎乎的操作窗口实在是提不起什么兴趣，而前端则能让我实实在在的看见我写的东西。每学到新的知识，就意味着自己可以使用更多的方法去实现更好的网页，自然也对前端慢慢地有了兴趣。 短期目标最近的目标还是好好学习前端的知识，准备迎接即将到来的秋招。希望自己能在秋招中找到一份好的工作，开始自己的另一种生活。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>感想</tag>
      </tags>
  </entry>
</search>
